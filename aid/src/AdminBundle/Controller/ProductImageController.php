<?php
namespace AdminBundle\Controller;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;
use Symfony\Component\HttpFoundation\Request;use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\RouterInterface;
use Symfony\Component\HttpFoundation\Session\Session;
use Symfony\Component\PropertyAccess\PropertyAccess;
use Symfony\Bundle\DoctrineBundle\ConnectionFactory;
use AdminBundle\Entity\Productmaster;use AdminBundle\Entity\Medialibrarymaster;use AdminBundle\Entity\Productcategoryrelation;
/**
* @Route("/{domain}")
*/
class ProductImageController extends BaseController
{
	public function __construct() {
		parent::__construct();
        $obj = new BaseController();
		$obj->checkSessionAction();
    }		/**     * @Route("/productImage")	 * @Template()     */    public function indexAction() {		return;	}	
    /**
     * @Route("/productImage/save")
     */
    public function saveAction(Request $request) {		ini_set('max_execution_time', 0);		ini_set('max_input_time ',"-1");		ini_set("memory_limit","-1");		error_reporting( E_ALL );		ini_set('display_errors', 1);		$vendor_exists_str = $msg_type = $msg = $vendor_insert_error_str = '';		$operation = 'product_import' ;		$allowed =  array('csv');		$flie_ext_flag = false ;		$res_str = '';		$filename = $_FILES['product_csv']['name'];		$filename_tmp = $_FILES['product_csv']['tmp_name'];		$created_by = $this->get('session')->get('user_id');		$created_datetime = date('Y-m-d H:i:s');		$domain_id = $this->get('session')->get('domain_id');		$ext = pathinfo($filename, PATHINFO_EXTENSION);		if(!in_array($ext,$allowed) ) {			$flie_ext_flag = false ;		} else {			$flie_ext_flag = true ;			$check_vendor_counter = "";			if($_FILES["product_csv"]["size"] > 0)			{				if($operation =='product_import')				{					$file = fopen($filename_tmp, "r");					$res_str = '' ;					$rec_cnt = 0;					$flag = false;					$image_index = 2;					while (($emapData = fgetcsv($file, 10000, ",")) !== FALSE)					{						//$flag = false;						$data = array_map("utf8_encode",$emapData);						//var_dump($data);exit;						$num = count ($data);						//var_dump($num);						//var_dump($compare_num_as_per_file_type);						//exit;						if(!empty($data))						{							$items = $data[0];							$discription = $data[1];							$price = $data[2];							$category = $data[3];							$sub_category1 = $data[4];							$sub_category2 = $data[5];							$unit = $data[6];							if($rec_cnt == 0)							{								$flag = true;								if(strtolower($items) != 'items')								{									$flag = false;								}								if(strtolower($discription) != 'discription')								{									$flag = false;								}								if(strtolower($price) != 'price')								{									$flag = false;								}								if(strtolower($category) != 'category')								{									$flag = false;								}								if(strtolower($sub_category1) != 'sub category')								{									$flag = false;								}								if(strtolower($sub_category2) != 'sub category')								{									$flag = false;								}							}							if($flag == false)							{								//csv formate violate							}							if($rec_cnt >= 1 && $flag == true)							{								$res_str = 'success_msg';								$vali1 = true;								if(empty($items))								{									$vali1 = false;									// error - Warning_Text_to_Display text									$msg_type = "error_msg";									$msg .= "Item name can not be empty, at line no : ".($rec_cnt+1)." . " ;									$vendor_insert_error_str .= "Item name can not be empty, at line no : ".($rec_cnt+1).". <br>" ;									$flag_log = $this->maintainLogs($operation,"Validation","","Item name can not be empty, at line no : ".($rec_cnt+1)." . ","",$filename);									$vendor_exists_str .= $items.'  ';								}								if(empty($category))								{									$vali1 = false;									// error - Warning_Text_to_Display text									$msg_type = "error_msg";									$msg .= "Item main category can not be empty, at line no : ".($rec_cnt+1)." . " ;									$vendor_insert_error_str .= "Item main category can not be empty, at line no : ".($rec_cnt+1).". <br>" ;									$flag_log = $this->maintainLogs($operation,"Validation","","Item main category can not be empty, at line no : ".($rec_cnt+1)." . ","",$filename);									$vendor_exists_str .= $category.'  ';								}								if(empty($sub_category1))								{									$vali1 = false;									// error - Warning_Text_to_Display text									$msg_type = "error_msg";									$msg .= "Item sub category can not be empty, at line no : ".($rec_cnt+1)." . " ;									$vendor_insert_error_str .= "Item sub category can not be empty, at line no : ".($rec_cnt+1).". <br>" ;									$flag_log = $this->maintainLogs($operation,"Validation","","Item sub category can not be empty, at line no : ".($rec_cnt+1)." . ","",$filename);									$vendor_exists_str .= $sub_category1.'  ';								}								if($vali1 == 'true')								{																		/* media liabrary */																		$image_name = $image_index.'.jpg';									$media_location = '/bundles/design/uploads/product_image';																		$medialiabrary = new Medialibrarymaster();									$medialiabrary->setMedia_type_id(1);									$medialiabrary->setMedia_title($image_name);									$medialiabrary->setMedia_location($media_location);									$medialiabrary->setMedia_name($image_name);									$medialiabrary->setCreated_on(date('Y-m-d h:i:s'));									$medialiabrary->setIs_deleted(0);									$em = $this->getDoctrine()->getManager();									$em->persist($medialiabrary);									$em->flush();									$media_id = $medialiabrary->getMedia_library_master_id();									$image_index++;									/* end media liabrary */																											$main_id = 0;									$pm = new Productmaster();									$pm->setProduct_title($items);									$pm->setRefrence_code('');									$pm->setProduct_type_id(1);									$pm->setBrand_id(0);									$pm->setShort_description('');									$pm->setDescription($discription);									$pm->setProduct_logo($media_id);									$pm->setStatus('active');									$pm->setQuantity(0);									$pm->setMax_allowed_qty_per_order(0);									$pm->setMarket_price($price);									$pm->setOriginal_price($price);									$pm->setSku(0);									$pm->setOn_sale('no');									$pm->setAdditional_shipping_charge(0);									$pm->setLanguage_id(1);									$pm->setMain_product_master_id($main_id);									$pm->setCreated_by($created_by);									$pm->setCreated_date($created_datetime);									$pm->setLast_updated($created_datetime);									$pm->setDomain_id($domain_id);									$pm->setFavourite_count(0);									$pm->setProduct_ws_add(0);									$pm->setIs_deleted(0);									$pm->setUnit_size($unit);									$pm->setSort_order($main_id);																		$em->persist($pm);									$em->flush();									if($main_id == '0' || $main_id == 0)									{										$main_id = $pm->getProduct_master_id();										$pm->setMain_product_master_id($main_id);										$pm->setSort_order($main_id);										$pm->setRefrence_code($main_id);										$em->flush();									}									$cat_name = '';									if(!empty($sub_category2))									{										$cat_name = $sub_category2;									}									else if(!empty($sub_category1))									{										$cat_name = $sub_category1;									}									$cat_id = $this->get_cat_id_from_name($category,$sub_category1,$sub_category2,1,$domain_id);									//var_dump($cat_id);exit;									if(!empty($cat_id) && $cat_id != '0')									{										$pcr = new Productcategoryrelation();										$pcr->setProduct_id($main_id);										$pcr->setLanguage_id(1);										$pcr->setCategory_id($cat_id);										$pcr->setCreated_by($created_by);										$pcr->setCreate_date($created_datetime);										$pcr->setDomain_id($domain_id);										$pcr->setIs_deleted(0);										$em = $this->getDoctrine()->getManager();										$em->persist($pcr);										$em->flush();									}								}							}						}						$rec_cnt++;					}				}				$flash_bag = 'success_msg';				$res_str = "Products imported successfully";			}			else{				$flash_bag = 'error_msg';				$res_str = "Invalid file type";				//in valid file			}		}		if($flie_ext_flag == true ){		}		else{			$msg_type = "error_msg";			$msg = "File Extenstion is not Valid ." ;			$vendor_insert_error_str .= "File Extenstion is not Valid.<br>" ;			$flag_log = $this->maintainLogs($operation,"File Import","","File Extenstion is not Valid","",$filename);		}		$this->get("session")->getFlashBag()->set($msg_type,$msg);		//var_dump($msg);exit;		if($res_str != ''){			$flag_log = $this->maintainLogs($operation,"File Import",$res_str,"","",$filename);			$this->get("session")->getFlashBag()->set($flash_bag, $res_str);			//$this->get("session")->getFlashBag()->set("response_msg", $res_str);		}				$referer = $request->headers->get('referer');		return $this->redirect($referer);	}		public function get_cat_id_from_name($category,$subcat1,$subcat2,$lang_id,$domain_id)	{		$parent_for_next = 0;		$em = $this->getDoctrine()->getManager();		$connection = $em->getConnection();		$need_to_check_parent = false;		if(!empty($category))		{			$sql1 = "SELECT main_category_id from category_master WHERE trim(lower(category_name))='".trim(strtolower($category))."' AND language_id='$lang_id' AND domain_id='$domain_id' AND is_deleted='0'";			$statement = $connection->prepare($sql1);			$statement->execute();			$cat_list_chk = $statement->fetch();			if(!empty($cat_list_chk))			{					$parent_for_next = $cat_list_chk['main_category_id'];					if(!empty($subcat1))					{							$sql1 = "SELECT main_category_id from category_master WHERE trim(lower(category_name))='".trim(strtolower($subcat1))."' AND language_id='$lang_id' AND domain_id='$domain_id' AND is_deleted='0' AND parent_category_id='$parent_for_next'";							$statement = $connection->prepare($sql1);							$statement->execute();							$cat1_list_chk = $statement->fetch();							if(!empty($cat1_list_chk))							{									$parent_for_next = $cat1_list_chk['main_category_id'];									if(!empty($subcat2))									{											$sql1 = "SELECT main_category_id from category_master WHERE trim(lower(category_name))='".trim(strtolower($subcat2))."' AND language_id='$lang_id' AND domain_id='$domain_id' AND is_deleted='0' AND parent_category_id='$parent_for_next'";											$statement = $connection->prepare($sql1);											$statement->execute();											$cat2_list_chk = $statement->fetch();											if(!empty($cat2_list_chk))											{													$parent_for_next = $cat2_list_chk['main_category_id'];											}else{return 0;}									}							}else{return 0;}					}			}else{return 0;}		}		return $parent_for_next;	}
}